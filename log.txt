    Blocking waiting for file lock on build directory
warning: unused import: `std::str::FromStr`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/event.rs:1:5
  |
1 | use std::str::FromStr;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/event.rs:7:61
  |
7 | use crate::models::gdelt::{DatabaseTableEntry, GDELTObject, ToProto};
  |                                                             ^^^^^^^

warning: unused import: `ToProto`
  --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/gkg.rs:12:71
   |
12 | use crate::models::gdelt::{CellItem, DatabaseTableEntry, GDELTObject, ToProto};
   |                                                                       ^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/mentions.rs:7:61
  |
7 | use crate::models::gdelt::{DatabaseTableEntry, GDELTObject, ToProto};
  |                                                             ^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_counts.rs:6:51
  |
6 | use crate::models::gdelt::{CellItem, GDELTObject, ToProto};
  |                                                   ^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:1:51
  |
1 | use crate::models::gdelt::{CellItem, GDELTObject, ToProto};
  |                                                   ^^^^^^^

warning: unused import: `chrono::Timelike`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:3:5
  |
3 | use chrono::Timelike;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `TimestampError` and `Timestamp`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:5:19
  |
5 | use prost_types::{Timestamp, TimestampError};
  |                   ^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `std::fmt::Display`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:7:5
  |
7 | use std::fmt::Display;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_event_action.rs:5:41
  |
5 | use crate::models::gdelt::{GDELTObject, ToProto};
  |                                         ^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_location.rs:5:70
  |
5 | use crate::models::gdelt::{CellItem, DatabaseTableEnum, GDELTObject, ToProto};
  |                                                                      ^^^^^^^

warning: unused import: `crate::models::gdelt::ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_location_types.rs:4:5
  |
4 | use crate::models::gdelt::ToProto;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::gdelt::ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_source_collection_identifier.rs:4:5
  |
4 | use crate::models::gdelt::ToProto;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ToProto`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_tone.rs:5:41
  |
5 | use crate::models::gdelt::{GDELTObject, ToProto};
  |                                         ^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_languages.rs:2:13
  |
2 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_categorylist.rs:1:1
  |
1 | #![feature(repr64)]
  | ^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_attributes)]` on by default

warning: use of deprecated associated function `chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:369:50
    |
369 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                  ^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `chrono::NaiveDate::and_hms`: use `and_hms_opt()` instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:369:64
    |
369 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                                ^^^^^^^

warning: use of deprecated associated function `chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:375:50
    |
375 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                  ^^^^^^^^

warning: use of deprecated method `chrono::NaiveDate::and_hms`: use `and_hms_opt()` instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:375:64
    |
375 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                                ^^^^^^^

warning: use of deprecated associated function `chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:382:50
    |
382 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                  ^^^^^^^^

warning: use of deprecated method `chrono::NaiveDate::and_hms`: use `and_hms_opt()` instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:382:64
    |
382 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                                ^^^^^^^

warning: use of deprecated associated function `chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:392:50
    |
392 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(hour, minute, second), Utc))
    |                                                  ^^^^^^^^

warning: use of deprecated method `chrono::NaiveDate::and_hms`: use `and_hms_opt()` instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:392:64
    |
392 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(hour, minute, second), Utc))
    |                                                                ^^^^^^^

warning: use of deprecated associated function `chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:400:50
    |
400 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                  ^^^^^^^^

warning: use of deprecated method `chrono::NaiveDate::and_hms`: use `and_hms_opt()` instead
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_date.rs:400:64
    |
400 |                     .map(|date| DateTime::<Utc>::from_utc(date.and_hms(0, 0, 0), Utc))
    |                                                                ^^^^^^^

warning: unused variable: `offset_u128`
   --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_categorylist.rs:901:24
    |
901 |                     Ok(offset_u128) => match GDELTCategoryList::from_str(split.get(0)?) {
    |                        ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset_u128`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `value`
    --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_categorylist.rs:1007:33
     |
1007 |     pub(crate) fn extract_value(value: GDELTCategoryList) -> Option<u64> {
     |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: associated function `extract_value` is never used
    --> /home/bigguy/Projects/gdelt_fetcher/models/src/models/gdelt/utils/gdelt_categorylist.rs:1007:19
     |
987  | impl GDELTCategoryList {
     | ---------------------- associated function in this implementation
...
1007 |     pub(crate) fn extract_value(value: GDELTCategoryList) -> Option<u64> {
     |                   ^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: `models` (lib) generated 29 warnings (run `cargo fix --lib -p models` to apply 15 suggestions)
warning: unused import: `OpenOptions`
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_fetcher.rs:11:29
   |
11 | use tokio::fs::{self, File, OpenOptions};
   |                             ^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `self`
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_fetcher.rs:16:15
   |
16 | use std::io::{self, Write, Read};
   |               ^^^^

warning: unused import: `models::models::gdelt::utils::gdelt_languages::GDELTLanguage`
 --> /home/bigguy/Projects/gdelt_fetcher/data/src/utils/types/api_types/mod.rs:1:5
  |
1 | use models::models::gdelt::utils::gdelt_languages::GDELTLanguage;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
 --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_api.rs:6:50
  |
6 | use crate::utils::types::api_types::translator::{self, Translator};
  |                                                  ^^^^

warning: variable does not need to be mutable
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/csv_to_structs.rs:57:10
   |
57 |     let (mut r_object, extension) = match database_type {
   |          ----^^^^^^^^
   |          |
   |          help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused import: `Write`
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_fetcher.rs:16:21
   |
16 | use std::io::{self, Write, Read};
   |                     ^^^^^

warning: unused import: `Read`
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_fetcher.rs:16:28
   |
16 | use std::io::{self, Write, Read};
   |                            ^^^^

warning: associated function `prepend_line_to_file` is never used
   --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_fetcher.rs:155:4
    |
71  | impl GdeltFileFetcher {
    | --------------------- associated function in this implementation
...
155 | fn prepend_line_to_file(file_path: &str) -> &str {
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: static `JSON_PATH_FOLDER` is never used
  --> /home/bigguy/Projects/gdelt_fetcher/data/src/csv_to_json.rs:20:8
   |
20 | static JSON_PATH_FOLDER: Lazy<&Path> = Lazy::new(|| Path::new("./data/json"));
   |        ^^^^^^^^^^^^^^^^

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/bigguy/Projects/gdelt_fetcher/data/src/gdelt_api.rs:140:39
    |
140 |         let mut request = BASE_API_URL.clone().to_string();
    |                                       ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed
    = note: `#[warn(noop_method_call)]` on by default

warning: `data` (lib) generated 10 warnings (run `cargo fix --lib -p data` to apply 6 suggestions)
warning: unused import: `Event`
 --> src/config/behaviour.rs:5:18
  |
5 |     mdns::{self, Event},
  |                  ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `io::Read`
 --> src/config/database/mod.rs:3:24
  |
3 | use std::{borrow::Cow, io::Read, iter};
  |                        ^^^^^^^^

warning: unused imports: `DatabaseTableEntry` and `event::Event`
 --> src/config/swarm/mod.rs:5:36
  |
5 | use gdelt_fetcher::models::gdelt::{DatabaseTableEntry, event::Event};
  |                                    ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `GetRecordOk`, `PeerRecord`, `PutRecordOk`, `RecordKey`, and `Record`
  --> src/config/swarm/mod.rs:10:17
   |
10 |     kad::{self, GetRecordOk, Mode, PeerRecord, PutRecordOk, Record, RecordKey},
   |                 ^^^^^^^^^^^        ^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^

warning: unused import: `Receiver`
  --> src/config/swarm/mod.rs:20:22
   |
20 |         mpsc::{self, Receiver},
   |                      ^^^^^^^^

warning: unused import: `crate::gdelt_operations::KadAction`
  --> src/config/swarm/mod.rs:24:5
   |
24 | use crate::gdelt_operations::KadAction;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `time::Duration`
   --> src/config/swarm/mod.rs:106:23
    |
106 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `Record`
   --> src/config/swarm/mod.rs:110:29
    |
110 |     use libp2p::kad::{Mode, Record};
    |                             ^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/gdelt_operations/mod.rs:1:5
  |
1 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `DatabaseTableEntry` and `event::Event`
 --> src/gdelt_operations/mod.rs:4:5
  |
4 |     DatabaseTableEntry, DatabaseTableEnum, PrimaryKey, event::Event,
  |     ^^^^^^^^^^^^^^^^^^                                 ^^^^^^^^^^^^

warning: unused imports: `PutRecordError`, `PutRecordOk`, `QueryId`, `Record`, `Swarm`, `self`, and `swarm::SwarmEvent`
 --> src/gdelt_operations/mod.rs:7:24
  |
7 |     Multiaddr, PeerId, Swarm,
  |                        ^^^^^
8 |     kad::{self, PutRecordError, PutRecordOk, QueryId, Record},
  |           ^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^  ^^^^^^
9 |     swarm::SwarmEvent,
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `Mutex`, `broadcast`, and `mpsc`
  --> src/gdelt_operations/mod.rs:11:19
   |
11 | use tokio::sync::{Mutex, broadcast, mpsc};
   |                   ^^^^^  ^^^^^^^^^  ^^^^

warning: unused imports: `NetEvent` and `NetabaseBehaviour`
  --> src/gdelt_operations/mod.rs:13:32
   |
13 | use crate::config::behaviour::{NetEvent, NetabaseBehaviour};
   |                                ^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused variable: `swarm`
  --> src/config/swarm/mod.rs:95:5
   |
95 |     swarm: &mut Swarm<NetabaseBehaviour>,
   |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_swarm`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `sender`
  --> src/config/swarm/mod.rs:97:5
   |
97 |     sender: &mut Sender<kad::Event>,
   |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_sender`

warning: unused variable: `mentions`
  --> src/config/swarm/swarm_action.rs:41:87
   |
41 | ...                   gdelt_fetcher::models::gdelt::DatabaseTableEnum::Mentions(mentions) => {
   |                                                                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mentions`

warning: unused variable: `global_knowledge_graph`
  --> src/config/swarm/swarm_action.rs:44:99
   |
44 | ...                   gdelt_fetcher::models::gdelt::DatabaseTableEnum::GlobalKnowledgeGraph(global_knowledge_graph) => {
   |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_global_knowledge_graph`

warning: unused variable: `event`
  --> src/config/swarm/swarm_action.rs:47:84
   |
47 | ...                   gdelt_fetcher::models::gdelt::DatabaseTableEnum::Event(event) => {
   |                                                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `database_table_enum`
  --> src/config/swarm/swarm_action.rs:67:52
   |
67 |                     KadAction::Update(primary_key, database_table_enum) => {
   |                                                    ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_database_table_enum`

warning: unused variable: `stats`
  --> src/config/swarm/swarm_action.rs:82:41
   |
82 | ...                   stats,
   |                       ^^^^^ help: try ignoring the field: `stats: _`

warning: unused variable: `step`
  --> src/config/swarm/swarm_action.rs:83:41
   |
83 | ...                   step,
   |                       ^^^^ help: try ignoring the field: `step: _`

warning: unused variable: `peer`
  --> src/config/swarm/swarm_action.rs:93:53
   |
93 | ...                   peer,
   |                       ^^^^ help: try ignoring the field: `peer: _`

warning: unused variable: `stats`
   --> src/config/swarm/swarm_action.rs:119:41
    |
119 | ...                   stats,
    |                       ^^^^^ help: try ignoring the field: `stats: _`

warning: unused variable: `step`
   --> src/config/swarm/swarm_action.rs:120:41
    |
120 | ...                   step,
    |                       ^^^^ help: try ignoring the field: `step: _`

warning: unused variable: `peer`
   --> src/config/swarm/swarm_action.rs:128:53
    |
128 | ...                   peer,
    |                       ^^^^ help: try ignoring the field: `peer: _`

warning: unused variable: `stats`
   --> src/config/swarm/swarm_action.rs:151:41
    |
151 | ...                   stats,
    |                       ^^^^^ help: try ignoring the field: `stats: _`

warning: unused variable: `step`
   --> src/config/swarm/swarm_action.rs:152:41
    |
152 | ...                   step,
    |                       ^^^^ help: try ignoring the field: `step: _`

warning: unused variable: `peer`
   --> src/config/swarm/swarm_action.rs:160:53
    |
160 | ...                   peer,
    |                       ^^^^ help: try ignoring the field: `peer: _`

warning: unused variable: `ping`
  --> src/config/behaviour.rs:62:13
   |
62 |         let ping = ping::Behaviour::default();
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_ping`

warning: variable does not need to be mutable
   --> src/config/database/mod.rs:199:29
    |
199 |                         let mut vect = bincode::deserialize::<Vec<ProviderRecordWrapper>>(bytes)
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/config/swarm/mod.rs:121:14
    |
121 |         let (mut swarm_action_sender, mut swarm_action_receiver) = mpsc::channel(1000);
    |              ----^^^^^^^^^^^^^^^^^^^
    |              |
    |              help: remove this `mut`

warning: constant `BOOTNODES` is never used
  --> src/config/swarm/mod.rs:30:7
   |
30 | const BOOTNODES: [&str; 4] = [
   |       ^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: constant `IPFS_PROTO_NAME` is never used
  --> src/config/swarm/mod.rs:37:7
   |
37 | const IPFS_PROTO_NAME: StreamProtocol = StreamProtocol::new("/ipfs/kad/1.0.0");
   |       ^^^^^^^^^^^^^^^

warning: unused `Result` that must be used
  --> src/config/database/mod.rs:59:9
   |
59 |         records.insert(key.clone(), RecordWrapper::from(r));
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
   |
59 |         let _ = records.insert(key.clone(), RecordWrapper::from(r));
   |         +++++++

warning: call to `.clone()` on a reference in this situation does nothing
   --> src/config/database/mod.rs:170:68
    |
170 |                         .map(|wrapper| ProviderRecord::from(wrapper.clone()))
    |                                                                    ^^^^^^^^
    |
    = note: the type `ProviderRecordWrapper` does not implement `Clone`, so calling `clone` on `&ProviderRecordWrapper` copies the reference, which does not do anything and can be removed
    = note: `#[warn(noop_method_call)]` on by default
help: remove this redundant call
    |
170 -                         .map(|wrapper| ProviderRecord::from(wrapper.clone()))
170 +                         .map(|wrapper| ProviderRecord::from(wrapper))
    |
help: if you meant to clone `ProviderRecordWrapper`, implement `Clone` for it
   --> src/config/database/wrappers.rs:19:1
    |
19  + #[derive(Clone)]
20  | pub struct ProviderRecordWrapper {
    |

warning: unused `Result` that must be used
   --> src/config/swarm/mod.rs:160:9
    |
160 |         handle.join();
    |         ^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
160 |         let _ = handle.join();
    |         +++++++

warning: `netabase` (bin "netabase" test) generated 36 warnings (run `cargo fix --bin "netabase" --tests` to apply 16 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.52s
     Running unittests src/main.rs (target/debug/deps/netabase-384d60f91883c40e)

running 1 test
test config::swarm::run_swarm_test::swarm_test ... 
Running Swarm
event NewListenAddr { listener_id: ListenerId(1), address: /ip4/127.0.0.1/tcp/36921 }
event NewListenAddr { listener_id: ListenerId(1), address: /ip4/192.168.24.161/tcp/36921 }
event Behaviour(Mdns(Discovered([(PeerId("12D3KooWP5PghooNgeaRyzuwnzJjQD1v7z8jM8PaAm2PNxxMngR3"), /ip4/192.168.24.161/tcp/40461/p2p/12D3KooWP5PghooNgeaRyzuwnzJjQD1v7z8jM8PaAm2PNxxMngR3)])))
event NewExternalAddrOfPeer { peer_id: PeerId("12D3KooWP5PghooNgeaRyzuwnzJjQD1v7z8jM8PaAm2PNxxMngR3"), address: /ip4/192.168.24.161/tcp/40461/p2p/12D3KooWP5PghooNgeaRyzuwnzJjQD1v7z8jM8PaAm2PNxxMngR3 }
